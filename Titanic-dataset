{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ef18fc64",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-10-21T12:08:24.611457Z",
     "iopub.status.busy": "2025-10-21T12:08:24.611172Z",
     "iopub.status.idle": "2025-10-21T12:08:26.484642Z",
     "shell.execute_reply": "2025-10-21T12:08:26.483867Z"
    },
    "papermill": {
     "duration": 1.881137,
     "end_time": "2025-10-21T12:08:26.486230",
     "exception": false,
     "start_time": "2025-10-21T12:08:24.605093",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/titanicdata/Titanic.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "087cd021",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-21T12:08:26.497106Z",
     "iopub.status.busy": "2025-10-21T12:08:26.496221Z",
     "iopub.status.idle": "2025-10-21T12:08:28.527996Z",
     "shell.execute_reply": "2025-10-21T12:08:28.527108Z"
    },
    "papermill": {
     "duration": 2.038645,
     "end_time": "2025-10-21T12:08:28.529580",
     "exception": false,
     "start_time": "2025-10-21T12:08:26.490935",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#basic libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "import random\n",
    "from wordcloud import WordCloud\n",
    "import matplotlib.pyplot as plt\n",
    "#Visualization\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "94ef8fb0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-21T12:08:28.540290Z",
     "iopub.status.busy": "2025-10-21T12:08:28.539464Z",
     "iopub.status.idle": "2025-10-21T12:08:28.585325Z",
     "shell.execute_reply": "2025-10-21T12:08:28.584343Z"
    },
    "papermill": {
     "duration": 0.053363,
     "end_time": "2025-10-21T12:08:28.587365",
     "exception": false,
     "start_time": "2025-10-21T12:08:28.534002",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name  Gender   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "df=pd.read_csv(\"/kaggle/input/titanicdata/Titanic.csv\")\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fa57f1eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-21T12:08:28.598471Z",
     "iopub.status.busy": "2025-10-21T12:08:28.598154Z",
     "iopub.status.idle": "2025-10-21T12:08:28.630560Z",
     "shell.execute_reply": "2025-10-21T12:08:28.629565Z"
    },
    "papermill": {
     "duration": 0.04011,
     "end_time": "2025-10-21T12:08:28.632301",
     "exception": false,
     "start_time": "2025-10-21T12:08:28.592191",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>257.353842</td>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>223.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>668.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
       "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
       "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
       "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
       "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
       "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
       "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
       "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
       "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
       "\n",
       "            Parch        Fare  \n",
       "count  891.000000  891.000000  \n",
       "mean     0.381594   32.204208  \n",
       "std      0.806057   49.693429  \n",
       "min      0.000000    0.000000  \n",
       "25%      0.000000    7.910400  \n",
       "50%      0.000000   14.454200  \n",
       "75%      0.000000   31.000000  \n",
       "max      6.000000  512.329200  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e42f4afb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-21T12:08:28.645775Z",
     "iopub.status.busy": "2025-10-21T12:08:28.645140Z",
     "iopub.status.idle": "2025-10-21T12:08:28.656064Z",
     "shell.execute_reply": "2025-10-21T12:08:28.655022Z"
    },
    "papermill": {
     "duration": 0.018196,
     "end_time": "2025-10-21T12:08:28.657505",
     "exception": false,
     "start_time": "2025-10-21T12:08:28.639309",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pclass\n",
       "3    491\n",
       "1    216\n",
       "2    184\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Pclass'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c2e91adb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-21T12:08:28.669014Z",
     "iopub.status.busy": "2025-10-21T12:08:28.668227Z",
     "iopub.status.idle": "2025-10-21T12:08:28.675077Z",
     "shell.execute_reply": "2025-10-21T12:08:28.674349Z"
    },
    "papermill": {
     "duration": 0.014113,
     "end_time": "2025-10-21T12:08:28.676336",
     "exception": false,
     "start_time": "2025-10-21T12:08:28.662223",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Embarked\n",
       "S    644\n",
       "C    168\n",
       "Q     77\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Embarked'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f203d61e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-21T12:08:28.688028Z",
     "iopub.status.busy": "2025-10-21T12:08:28.687420Z",
     "iopub.status.idle": "2025-10-21T12:08:28.694644Z",
     "shell.execute_reply": "2025-10-21T12:08:28.693835Z"
    },
    "papermill": {
     "duration": 0.014553,
     "end_time": "2025-10-21T12:08:28.696148",
     "exception": false,
     "start_time": "2025-10-21T12:08:28.681595",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Gender\n",
       "male      577\n",
       "female    314\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Gender'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9b5d1db6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-21T12:08:28.708647Z",
     "iopub.status.busy": "2025-10-21T12:08:28.707940Z",
     "iopub.status.idle": "2025-10-21T12:08:28.715542Z",
     "shell.execute_reply": "2025-10-21T12:08:28.714872Z"
    },
    "papermill": {
     "duration": 0.015599,
     "end_time": "2025-10-21T12:08:28.716861",
     "exception": false,
     "start_time": "2025-10-21T12:08:28.701262",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Cabin\n",
       "B96 B98        4\n",
       "G6             4\n",
       "C23 C25 C27    4\n",
       "C22 C26        3\n",
       "F33            3\n",
       "              ..\n",
       "E34            1\n",
       "C7             1\n",
       "C54            1\n",
       "E36            1\n",
       "C148           1\n",
       "Name: count, Length: 147, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Cabin'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "210ebbd6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-21T12:08:28.728284Z",
     "iopub.status.busy": "2025-10-21T12:08:28.727504Z",
     "iopub.status.idle": "2025-10-21T12:08:28.737087Z",
     "shell.execute_reply": "2025-10-21T12:08:28.736212Z"
    },
    "papermill": {
     "duration": 0.016613,
     "end_time": "2025-10-21T12:08:28.738373",
     "exception": false,
     "start_time": "2025-10-21T12:08:28.721760",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Fare\n",
       "8.0500     43\n",
       "13.0000    42\n",
       "7.8958     38\n",
       "7.7500     34\n",
       "26.0000    31\n",
       "           ..\n",
       "35.0000     1\n",
       "28.5000     1\n",
       "6.2375      1\n",
       "14.0000     1\n",
       "10.5167     1\n",
       "Name: count, Length: 248, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Fare'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3c990571",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-21T12:08:28.749192Z",
     "iopub.status.busy": "2025-10-21T12:08:28.748929Z",
     "iopub.status.idle": "2025-10-21T12:08:28.755563Z",
     "shell.execute_reply": "2025-10-21T12:08:28.754553Z"
    },
    "papermill": {
     "duration": 0.013869,
     "end_time": "2025-10-21T12:08:28.757081",
     "exception": false,
     "start_time": "2025-10-21T12:08:28.743212",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SibSp\n",
       "0    608\n",
       "1    209\n",
       "2     28\n",
       "4     18\n",
       "3     16\n",
       "8      7\n",
       "5      5\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['SibSp'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "23cc9105",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-21T12:08:28.768373Z",
     "iopub.status.busy": "2025-10-21T12:08:28.768101Z",
     "iopub.status.idle": "2025-10-21T12:08:28.775414Z",
     "shell.execute_reply": "2025-10-21T12:08:28.774566Z"
    },
    "papermill": {
     "duration": 0.014505,
     "end_time": "2025-10-21T12:08:28.776679",
     "exception": false,
     "start_time": "2025-10-21T12:08:28.762174",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Age\n",
       "24.00    30\n",
       "22.00    27\n",
       "18.00    26\n",
       "19.00    25\n",
       "28.00    25\n",
       "         ..\n",
       "36.50     1\n",
       "55.50     1\n",
       "0.92      1\n",
       "23.50     1\n",
       "74.00     1\n",
       "Name: count, Length: 88, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Age'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "23429d58",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-21T12:08:28.788887Z",
     "iopub.status.busy": "2025-10-21T12:08:28.788571Z",
     "iopub.status.idle": "2025-10-21T12:08:28.795070Z",
     "shell.execute_reply": "2025-10-21T12:08:28.794324Z"
    },
    "papermill": {
     "duration": 0.014342,
     "end_time": "2025-10-21T12:08:28.796420",
     "exception": false,
     "start_time": "2025-10-21T12:08:28.782078",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Parch\n",
       "0    678\n",
       "1    118\n",
       "2     80\n",
       "5      5\n",
       "3      5\n",
       "4      4\n",
       "6      1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Parch'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6eb1df6e",
   "metadata": {
    "papermill": {
     "duration": 0.005049,
     "end_time": "2025-10-21T12:08:28.807120",
     "exception": false,
     "start_time": "2025-10-21T12:08:28.802071",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**EDA (EXPLORATORY DATA ANALYSIS) : Split data,Handle missing values,Encode categorical variables, Feature                                                   Engineering,Drop unused columns, Scaling**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "93244eb5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-21T12:08:28.818219Z",
     "iopub.status.busy": "2025-10-21T12:08:28.817925Z",
     "iopub.status.idle": "2025-10-21T12:08:28.834285Z",
     "shell.execute_reply": "2025-10-21T12:08:28.833224Z"
    },
    "papermill": {
     "duration": 0.023504,
     "end_time": "2025-10-21T12:08:28.835652",
     "exception": false,
     "start_time": "2025-10-21T12:08:28.812148",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>FamilySize</th>\n",
       "      <th>IsChild</th>\n",
       "      <th>FarePerPerson</th>\n",
       "      <th>FareBand</th>\n",
       "      <th>HasCabin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name  Gender   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  FamilySize  IsChild  \\\n",
       "0      0         A/5 21171   7.2500   NaN        S           1        1   \n",
       "1      0          PC 17599  71.2833   C85        C           1        1   \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S           1        1   \n",
       "3      0            113803  53.1000  C123        S           1        1   \n",
       "4      0            373450   8.0500   NaN        S           1        1   \n",
       "\n",
       "   FarePerPerson  FareBand  HasCabin  \n",
       "0              1         1         1  \n",
       "1              1         1         1  \n",
       "2              1         1         1  \n",
       "3              1         1         1  \n",
       "4              1         1         1  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#COLUMNS FOR FEATURE ENGINEERING\n",
    "df['FamilySize']=1\n",
    "df['IsChild']=1\n",
    "df['FarePerPerson']=1\n",
    "df['FareBand']=1\n",
    "df['HasCabin']=1\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "42f7439b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-21T12:08:28.848503Z",
     "iopub.status.busy": "2025-10-21T12:08:28.847913Z",
     "iopub.status.idle": "2025-10-21T12:08:28.880195Z",
     "shell.execute_reply": "2025-10-21T12:08:28.879254Z"
    },
    "papermill": {
     "duration": 0.040141,
     "end_time": "2025-10-21T12:08:28.881582",
     "exception": false,
     "start_time": "2025-10-21T12:08:28.841441",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>FamilySize</th>\n",
       "      <th>IsChild</th>\n",
       "      <th>FarePerPerson</th>\n",
       "      <th>FareBand</th>\n",
       "      <th>HasCabin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.0</td>\n",
       "      <td>891.0</td>\n",
       "      <td>891.0</td>\n",
       "      <td>891.0</td>\n",
       "      <td>891.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>257.353842</td>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>223.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>668.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
       "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
       "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
       "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
       "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
       "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
       "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
       "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
       "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
       "\n",
       "            Parch        Fare  FamilySize  IsChild  FarePerPerson  FareBand  \\\n",
       "count  891.000000  891.000000       891.0    891.0          891.0     891.0   \n",
       "mean     0.381594   32.204208         1.0      1.0            1.0       1.0   \n",
       "std      0.806057   49.693429         0.0      0.0            0.0       0.0   \n",
       "min      0.000000    0.000000         1.0      1.0            1.0       1.0   \n",
       "25%      0.000000    7.910400         1.0      1.0            1.0       1.0   \n",
       "50%      0.000000   14.454200         1.0      1.0            1.0       1.0   \n",
       "75%      0.000000   31.000000         1.0      1.0            1.0       1.0   \n",
       "max      6.000000  512.329200         1.0      1.0            1.0       1.0   \n",
       "\n",
       "       HasCabin  \n",
       "count     891.0  \n",
       "mean        1.0  \n",
       "std         0.0  \n",
       "min         1.0  \n",
       "25%         1.0  \n",
       "50%         1.0  \n",
       "75%         1.0  \n",
       "max         1.0  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "82c88ad9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-21T12:08:28.894377Z",
     "iopub.status.busy": "2025-10-21T12:08:28.894077Z",
     "iopub.status.idle": "2025-10-21T12:08:28.914625Z",
     "shell.execute_reply": "2025-10-21T12:08:28.913530Z"
    },
    "papermill": {
     "duration": 0.028808,
     "end_time": "2025-10-21T12:08:28.916208",
     "exception": false,
     "start_time": "2025-10-21T12:08:28.887400",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 17 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   PassengerId    891 non-null    int64  \n",
      " 1   Survived       891 non-null    int64  \n",
      " 2   Pclass         891 non-null    int64  \n",
      " 3   Name           891 non-null    object \n",
      " 4   Gender         891 non-null    object \n",
      " 5   Age            714 non-null    float64\n",
      " 6   SibSp          891 non-null    int64  \n",
      " 7   Parch          891 non-null    int64  \n",
      " 8   Ticket         891 non-null    object \n",
      " 9   Fare           891 non-null    float64\n",
      " 10  Cabin          204 non-null    object \n",
      " 11  Embarked       889 non-null    object \n",
      " 12  FamilySize     891 non-null    int64  \n",
      " 13  IsChild        891 non-null    int64  \n",
      " 14  FarePerPerson  891 non-null    int64  \n",
      " 15  FareBand       891 non-null    int64  \n",
      " 16  HasCabin       891 non-null    int64  \n",
      "dtypes: float64(2), int64(10), object(5)\n",
      "memory usage: 118.5+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "74e2d138",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-21T12:08:28.929599Z",
     "iopub.status.busy": "2025-10-21T12:08:28.929304Z",
     "iopub.status.idle": "2025-10-21T12:08:30.127626Z",
     "shell.execute_reply": "2025-10-21T12:08:30.126568Z"
    },
    "papermill": {
     "duration": 1.207218,
     "end_time": "2025-10-21T12:08:30.129108",
     "exception": false,
     "start_time": "2025-10-21T12:08:28.921890",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>FamilySize</th>\n",
       "      <th>IsChild</th>\n",
       "      <th>FarePerPerson</th>\n",
       "      <th>FareBand</th>\n",
       "      <th>HasCabin</th>\n",
       "      <th>...</th>\n",
       "      <th>Title_Major</th>\n",
       "      <th>Title_Master</th>\n",
       "      <th>Title_Miss</th>\n",
       "      <th>Title_Mlle</th>\n",
       "      <th>Title_Mr</th>\n",
       "      <th>Title_Mrs</th>\n",
       "      <th>Title_Rev</th>\n",
       "      <th>Title_Sir</th>\n",
       "      <th>Gender_female</th>\n",
       "      <th>Gender_male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>748</th>\n",
       "      <td>1</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>3</td>\n",
       "      <td>27.882292</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>3</td>\n",
       "      <td>23.214804</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.8792</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>633</th>\n",
       "      <td>1</td>\n",
       "      <td>38.506030</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>403</th>\n",
       "      <td>3</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>15.8500</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 42 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Pclass        Age  SibSp  Parch     Fare  FamilySize  IsChild  \\\n",
       "748       1  19.000000      1      0  53.1000           2        0   \n",
       "45        3  27.882292      0      0   8.0500           1        0   \n",
       "28        3  23.214804      0      0   7.8792           1        0   \n",
       "633       1  38.506030      0      0   0.0000           1        0   \n",
       "403       3  28.000000      1      0  15.8500           2        0   \n",
       "\n",
       "     FarePerPerson FareBand  HasCabin  ...  Title_Major  Title_Master  \\\n",
       "748              1        3         1  ...        False         False   \n",
       "45               1        1         0  ...        False         False   \n",
       "28               1        0         0  ...        False         False   \n",
       "633              1        0         0  ...        False         False   \n",
       "403              1        2         0  ...        False         False   \n",
       "\n",
       "     Title_Miss  Title_Mlle  Title_Mr  Title_Mrs  Title_Rev  Title_Sir  \\\n",
       "748       False       False      True      False      False      False   \n",
       "45        False       False      True      False      False      False   \n",
       "28         True       False     False      False      False      False   \n",
       "633       False       False      True      False      False      False   \n",
       "403       False       False      True      False      False      False   \n",
       "\n",
       "     Gender_female  Gender_male  \n",
       "748          False         True  \n",
       "45           False         True  \n",
       "28            True        False  \n",
       "633          False         True  \n",
       "403          False         True  \n",
       "\n",
       "[5 rows x 42 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "\n",
    "# -------------------- Split --------------------\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X = df.drop(columns=['Survived'])   # features\n",
    "y = df['Survived']                  # target\n",
    "\n",
    "x_train, x_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.3, random_state=42, stratify=y\n",
    ")\n",
    "\n",
    "# -------------------- Drop unused columns --------------------\n",
    "x_train = x_train.drop(columns=['PassengerId', 'Ticket'])\n",
    "x_test  = x_test.drop(columns=['PassengerId', 'Ticket'])\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Handle missing values ( x_train )------------------------------\n",
    "# Fill NaN values (important before encoding)\n",
    "x_train['Gender'] = x_train['Gender'].fillna('Unknown')\n",
    "\n",
    "\n",
    "# Age\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "# Split rows with and without Age\n",
    "train_with_age = x_train[x_train['Age'].notnull()]\n",
    "train_missing_age = x_train[x_train['Age'].isnull()]\n",
    "\n",
    "# Use features that help predict Age (drop columns that leak info or are Age itself)\n",
    "features = ['Pclass', 'SibSp', 'Parch', 'Fare', 'FamilySize']  # adjust based on your features\n",
    "\n",
    "X_age = train_with_age[features]\n",
    "y_age = train_with_age['Age']\n",
    "\n",
    "# Train regressor\n",
    "age_model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "age_model.fit(X_age, y_age)\n",
    "\n",
    "# Predict missing Ages\n",
    "x_train.loc[x_train['Age'].isnull(), 'Age'] = age_model.predict(train_missing_age[features])\n",
    "\n",
    "\n",
    "\n",
    "# Embarked\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "train_with_emb = x_train[x_train['Embarked'].notnull()]\n",
    "train_missing_emb = x_train[x_train['Embarked'].isnull()]\n",
    "\n",
    "X_emb = train_with_emb[['Pclass', 'Fare', 'FamilySize']]\n",
    "y_emb = train_with_emb['Embarked']\n",
    "\n",
    "emb_model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "emb_model.fit(X_emb, y_emb)\n",
    "\n",
    "x_train.loc[x_train['Embarked'].isnull(), 'Embarked'] = emb_model.predict(train_missing_emb[['Pclass', 'Fare', 'FamilySize']])\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Handle missing values (  x_test )------------------------------\n",
    "#Fill NaN values (important before encoding)\n",
    "x_test['Gender'] = x_test['Gender'].fillna('Unknown')\n",
    "\n",
    "# Age\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "test_missing_age = x_test[x_test['Age'].isnull()]\n",
    "if not test_missing_age.empty:\n",
    "    x_test.loc[x_test['Age'].isnull(), 'Age'] = age_model.predict(test_missing_age[features])\n",
    "\n",
    "\n",
    "# Embarked\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "test_missing_emb = x_test[x_test['Embarked'].isnull()]\n",
    "if not test_missing_emb.empty:\n",
    "    x_test.loc[x_test['Embarked'].isnull(), 'Embarked'] = emb_model.predict(test_missing_emb[['Pclass', 'Fare', 'FamilySize']])\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#Family size\n",
    "x_train['FamilySize'] = x_train['SibSp'] + x_train['Parch'] + 1\n",
    "x_test['FamilySize'] = x_test['SibSp'] + x_test['Parch'] + 1\n",
    "\n",
    "# Title from Name\n",
    "x_train['Title'] = x_train['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\n",
    "x_test['Title']  = x_test['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\n",
    "\n",
    "# Drop Name (no longer needed)\n",
    "x_train = x_train.drop(columns=['Name'])\n",
    "x_test  = x_test.drop(columns=['Name'])\n",
    "\n",
    "\n",
    "# Age-related\n",
    "x_train['IsChild'] = (x_train['Age'] < 12).astype(int)\n",
    "x_test['IsChild'] = (x_test['Age'] < 12).astype(int)\n",
    "\n",
    "x_train['AgeGroup'] = pd.cut(x_train['Age'], bins=[0,12,18,35,60,80],\n",
    "                             labels=['Child','Teen','YoungAdult','Adult','Senior'])\n",
    "x_test['AgeGroup'] = pd.cut(x_test['Age'], bins=[0,12,18,35,60,80],\n",
    "                            labels=['Child','Teen','YoungAdult','Adult','Senior'])\n",
    "\n",
    "\n",
    "\n",
    "# Fare-related\n",
    "fare_bins = pd.qcut(x_train['Fare'], 4, retbins=True)[1]\n",
    "x_train['FareBand'] = pd.cut(x_train['Fare'], bins=fare_bins, labels=[0,1,2,3], include_lowest=True)\n",
    "x_test['FareBand'] = pd.cut(x_test['Fare'], bins=fare_bins, labels=[0,1,2,3], include_lowest=True)\n",
    "\n",
    "\n",
    "# Cabin-related\n",
    "x_train['HasCabin'] = x_train['Cabin'].notnull().astype(int)\n",
    "x_test['HasCabin'] = x_test['Cabin'].notnull().astype(int)\n",
    "\n",
    "x_train['CabinDeck'] = x_train['Cabin'].str[0].fillna('U')\n",
    "x_test['CabinDeck'] = x_test['Cabin'].str[0].fillna('U')\n",
    "\n",
    "# Drop Name (no longer needed)\n",
    "x_train = x_train.drop(columns=['Cabin'])\n",
    "x_test  = x_test.drop(columns=['Cabin'])\n",
    "\n",
    "\n",
    "# One-hot encode multiple columns at once\n",
    "x_train = pd.get_dummies(x_train, columns=['Embarked', 'AgeGroup', 'CabinDeck', 'Title', 'Gender'], drop_first=False)\n",
    "\n",
    "# One-hot encode multiple columns at once\n",
    "x_test = pd.get_dummies(x_test, columns=['Embarked', 'AgeGroup', 'CabinDeck', 'Title', 'Gender'], drop_first=False)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Align columns between train and test (fill missing with 0)----------------\n",
    "x_train, x_test = x_train.align(x_test, join='left', axis=1, fill_value=0)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "x_train.head()\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "876c3b61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-21T12:08:30.142108Z",
     "iopub.status.busy": "2025-10-21T12:08:30.141768Z",
     "iopub.status.idle": "2025-10-21T12:08:30.178692Z",
     "shell.execute_reply": "2025-10-21T12:08:30.177873Z"
    },
    "papermill": {
     "duration": 0.045128,
     "end_time": "2025-10-21T12:08:30.180326",
     "exception": false,
     "start_time": "2025-10-21T12:08:30.135198",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "# -------------------- Scaling --------------------\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "scaler = StandardScaler()\n",
    "x_train_scaled = scaler.fit_transform(x_train)\n",
    "x_test_scaled = scaler.transform(x_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c003006e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-21T12:08:30.193653Z",
     "iopub.status.busy": "2025-10-21T12:08:30.193374Z",
     "iopub.status.idle": "2025-10-21T12:08:30.205130Z",
     "shell.execute_reply": "2025-10-21T12:08:30.203856Z"
    },
    "papermill": {
     "duration": 0.019894,
     "end_time": "2025-10-21T12:08:30.206448",
     "exception": false,
     "start_time": "2025-10-21T12:08:30.186554",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 623 entries, 748 to 136\n",
      "Data columns (total 42 columns):\n",
      " #   Column               Non-Null Count  Dtype   \n",
      "---  ------               --------------  -----   \n",
      " 0   Pclass               623 non-null    int64   \n",
      " 1   Age                  623 non-null    float64 \n",
      " 2   SibSp                623 non-null    int64   \n",
      " 3   Parch                623 non-null    int64   \n",
      " 4   Fare                 623 non-null    float64 \n",
      " 5   FamilySize           623 non-null    int64   \n",
      " 6   IsChild              623 non-null    int64   \n",
      " 7   FarePerPerson        623 non-null    int64   \n",
      " 8   FareBand             623 non-null    category\n",
      " 9   HasCabin             623 non-null    int64   \n",
      " 10  Embarked_C           623 non-null    bool    \n",
      " 11  Embarked_Q           623 non-null    bool    \n",
      " 12  Embarked_S           623 non-null    bool    \n",
      " 13  AgeGroup_Child       623 non-null    bool    \n",
      " 14  AgeGroup_Teen        623 non-null    bool    \n",
      " 15  AgeGroup_YoungAdult  623 non-null    bool    \n",
      " 16  AgeGroup_Adult       623 non-null    bool    \n",
      " 17  AgeGroup_Senior      623 non-null    bool    \n",
      " 18  CabinDeck_A          623 non-null    bool    \n",
      " 19  CabinDeck_B          623 non-null    bool    \n",
      " 20  CabinDeck_C          623 non-null    bool    \n",
      " 21  CabinDeck_D          623 non-null    bool    \n",
      " 22  CabinDeck_E          623 non-null    bool    \n",
      " 23  CabinDeck_F          623 non-null    bool    \n",
      " 24  CabinDeck_G          623 non-null    bool    \n",
      " 25  CabinDeck_T          623 non-null    bool    \n",
      " 26  CabinDeck_U          623 non-null    bool    \n",
      " 27  Title_Col            623 non-null    bool    \n",
      " 28  Title_Don            623 non-null    bool    \n",
      " 29  Title_Dr             623 non-null    bool    \n",
      " 30  Title_Jonkheer       623 non-null    bool    \n",
      " 31  Title_Lady           623 non-null    bool    \n",
      " 32  Title_Major          623 non-null    bool    \n",
      " 33  Title_Master         623 non-null    bool    \n",
      " 34  Title_Miss           623 non-null    bool    \n",
      " 35  Title_Mlle           623 non-null    bool    \n",
      " 36  Title_Mr             623 non-null    bool    \n",
      " 37  Title_Mrs            623 non-null    bool    \n",
      " 38  Title_Rev            623 non-null    bool    \n",
      " 39  Title_Sir            623 non-null    bool    \n",
      " 40  Gender_female        623 non-null    bool    \n",
      " 41  Gender_male          623 non-null    bool    \n",
      "dtypes: bool(32), category(1), float64(2), int64(7)\n",
      "memory usage: 68.9 KB\n"
     ]
    }
   ],
   "source": [
    "x_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7e83571f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-21T12:08:30.219999Z",
     "iopub.status.busy": "2025-10-21T12:08:30.219614Z",
     "iopub.status.idle": "2025-10-21T12:08:30.232258Z",
     "shell.execute_reply": "2025-10-21T12:08:30.231209Z"
    },
    "papermill": {
     "duration": 0.021052,
     "end_time": "2025-10-21T12:08:30.233610",
     "exception": false,
     "start_time": "2025-10-21T12:08:30.212558",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 268 entries, 625 to 387\n",
      "Data columns (total 42 columns):\n",
      " #   Column               Non-Null Count  Dtype   \n",
      "---  ------               --------------  -----   \n",
      " 0   Pclass               268 non-null    int64   \n",
      " 1   Age                  268 non-null    float64 \n",
      " 2   SibSp                268 non-null    int64   \n",
      " 3   Parch                268 non-null    int64   \n",
      " 4   Fare                 268 non-null    float64 \n",
      " 5   FamilySize           268 non-null    int64   \n",
      " 6   IsChild              268 non-null    int64   \n",
      " 7   FarePerPerson        268 non-null    int64   \n",
      " 8   FareBand             268 non-null    category\n",
      " 9   HasCabin             268 non-null    int64   \n",
      " 10  Embarked_C           268 non-null    bool    \n",
      " 11  Embarked_Q           268 non-null    bool    \n",
      " 12  Embarked_S           268 non-null    bool    \n",
      " 13  AgeGroup_Child       268 non-null    bool    \n",
      " 14  AgeGroup_Teen        268 non-null    bool    \n",
      " 15  AgeGroup_YoungAdult  268 non-null    bool    \n",
      " 16  AgeGroup_Adult       268 non-null    bool    \n",
      " 17  AgeGroup_Senior      268 non-null    bool    \n",
      " 18  CabinDeck_A          268 non-null    bool    \n",
      " 19  CabinDeck_B          268 non-null    bool    \n",
      " 20  CabinDeck_C          268 non-null    bool    \n",
      " 21  CabinDeck_D          268 non-null    bool    \n",
      " 22  CabinDeck_E          268 non-null    bool    \n",
      " 23  CabinDeck_F          268 non-null    bool    \n",
      " 24  CabinDeck_G          268 non-null    bool    \n",
      " 25  CabinDeck_T          268 non-null    int64   \n",
      " 26  CabinDeck_U          268 non-null    bool    \n",
      " 27  Title_Col            268 non-null    int64   \n",
      " 28  Title_Don            268 non-null    int64   \n",
      " 29  Title_Dr             268 non-null    bool    \n",
      " 30  Title_Jonkheer       268 non-null    int64   \n",
      " 31  Title_Lady           268 non-null    int64   \n",
      " 32  Title_Major          268 non-null    bool    \n",
      " 33  Title_Master         268 non-null    bool    \n",
      " 34  Title_Miss           268 non-null    bool    \n",
      " 35  Title_Mlle           268 non-null    int64   \n",
      " 36  Title_Mr             268 non-null    bool    \n",
      " 37  Title_Mrs            268 non-null    bool    \n",
      " 38  Title_Rev            268 non-null    bool    \n",
      " 39  Title_Sir            268 non-null    int64   \n",
      " 40  Gender_female        268 non-null    bool    \n",
      " 41  Gender_male          268 non-null    bool    \n",
      "dtypes: bool(25), category(1), float64(2), int64(14)\n",
      "memory usage: 42.6 KB\n"
     ]
    }
   ],
   "source": [
    "x_test.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4cb70128",
   "metadata": {
    "papermill": {
     "duration": 0.006962,
     "end_time": "2025-10-21T12:08:30.246781",
     "exception": false,
     "start_time": "2025-10-21T12:08:30.239819",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**REGULARIZATION : L2 RIDGE REGRESSION**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d4507fee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-21T12:08:30.261304Z",
     "iopub.status.busy": "2025-10-21T12:08:30.260526Z",
     "iopub.status.idle": "2025-10-21T12:08:54.415814Z",
     "shell.execute_reply": "2025-10-21T12:08:54.414771Z"
    },
    "papermill": {
     "duration": 24.163789,
     "end_time": "2025-10-21T12:08:54.417406",
     "exception": false,
     "start_time": "2025-10-21T12:08:30.253617",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ridge Logistic Regression Results\n",
      "Accuracy: 0.8246268656716418\n",
      "\n",
      "Confusion Matrix:\n",
      " [[141  24]\n",
      " [ 23  80]]\n",
      "\n",
      "Classification Report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.85      0.86       165\n",
      "           1       0.77      0.78      0.77       103\n",
      "\n",
      "    accuracy                           0.82       268\n",
      "   macro avg       0.81      0.82      0.82       268\n",
      "weighted avg       0.82      0.82      0.82       268\n",
      "\n",
      "Best Parameters: {'C': 0.1, 'l1_ratio': 0.3}\n",
      "Best CV Accuracy: 0.8217806451612903\n"
     ]
    }
   ],
   "source": [
    "#L2 - Ridge Regression \n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
    "\n",
    "# Create Ridge (L2) Logistic Regression\n",
    "ridge_log_reg = LogisticRegression(penalty=\"l2\", C=1.0, solver=\"lbfgs\", max_iter=1000, random_state=42)\n",
    "\n",
    "# Train\n",
    "ridge_log_reg.fit(x_train_scaled, y_train)\n",
    "\n",
    "# Predict\n",
    "y_pred = ridge_log_reg.predict(x_test_scaled)\n",
    "\n",
    "# Evaluate\n",
    "print(\"Ridge Logistic Regression Results\")\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n",
    "print(\"\\nConfusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n",
    "print(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred))\n",
    "\n",
    "\n",
    "#hyperparameter tuning\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "param_grid = {\n",
    "\"C\": [0.01, 0.1, 1, 10],\n",
    "\"l1_ratio\": [0.1, 0.3, 0.5, 0.7, 0.9]\n",
    "}\n",
    "\n",
    "grid = GridSearchCV(\n",
    "LogisticRegression(\n",
    "penalty=\"elasticnet\", solver=\"saga\", max_iter=5000, random_state=42\n",
    "),\n",
    "param_grid,\n",
    "cv=5,\n",
    "scoring=\"accuracy\"\n",
    ")\n",
    "\n",
    "grid.fit(x_train_scaled, y_train)\n",
    "print(\"Best Parameters:\", grid.best_params_)\n",
    "print(\"Best CV Accuracy:\", grid.best_score_)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a95f1e7b",
   "metadata": {
    "papermill": {
     "duration": 0.006085,
     "end_time": "2025-10-21T12:08:54.430316",
     "exception": false,
     "start_time": "2025-10-21T12:08:54.424231",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**MODEL EVALUATION**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1351bd03",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-21T12:08:54.444175Z",
     "iopub.status.busy": "2025-10-21T12:08:54.443867Z",
     "iopub.status.idle": "2025-10-21T12:08:54.725634Z",
     "shell.execute_reply": "2025-10-21T12:08:54.724816Z"
    },
    "papermill": {
     "duration": 0.290481,
     "end_time": "2025-10-21T12:08:54.727033",
     "exception": false,
     "start_time": "2025-10-21T12:08:54.436552",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC: 0.867872903795234\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Roc AUC for L2 Ridge regression \n",
    "\n",
    "\n",
    "from sklearn.metrics import roc_curve, roc_auc_score\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Get predicted probabilities for the positive class (1)\n",
    "y_proba = ridge_log_reg.predict_proba(x_test_scaled)[:, 1]\n",
    "\n",
    "# Compute ROC curve\n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_proba)\n",
    "\n",
    "# Compute AUC\n",
    "auc = roc_auc_score(y_test, y_proba)\n",
    "print(\"AUC:\", auc)\n",
    "\n",
    "# Plot ROC Curve\n",
    "plt.figure(figsize=(6,6))\n",
    "plt.plot(fpr, tpr, label=f\"L2 Logistic Regression (AUC = {auc:.2f})\")\n",
    "plt.plot([0,1], [0,1], 'k--', label=\"Random Guess\")\n",
    "plt.xlabel(\"False Positive Rate\")\n",
    "plt.ylabel(\"True Positive Rate\")\n",
    "plt.title(\"ROC Curve\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 8225276,
     "sourceId": 12994513,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 36.210133,
   "end_time": "2025-10-21T12:08:55.453982",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-21T12:08:19.243849",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
